{"version":3,"sources":["components/editor.js","components/preview.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Editor","className","id","onChange","this","props","handleEditor","editor","React","Component","marked","require","Preview","setOptions","renderer","Renderer","highlight","code","language","hljs","validLanguage","getLanguage","value","pedantic","gfm","breaks","sanitize","smartLists","smartypants","xhtml","dangerouslySetInnerHTML","__html","Header","App","state","e","target","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAiBeA,G,uLAXP,OACI,yBAAKC,UAAU,WACX,wBAAIA,UAAU,kCAAd,UACA,8BAAUC,GAAG,SAASD,UAAU,WAAWE,SAAUC,KAAKC,MAAMC,cAC/DF,KAAKC,MAAME,a,GARPC,IAAMC,YCDrBC,EAASC,EAAQ,IA+BRC,E,iLAVP,OAhBAF,EAAOG,WAAW,CACdC,SAAU,IAAIJ,EAAOK,SACrBC,UAAW,SAASC,EAAMC,GACxB,IAAMC,EAAOR,EAAQ,IACfS,EAAgBD,EAAKE,YAAYH,GAAYA,EAAW,YAC9D,OAAOC,EAAKH,UAAUI,EAAeH,GAAMK,OAE7CC,UAAU,EACVC,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,YAAY,EACZC,aAAa,EACbC,OAAO,IAIP,yBAAK5B,UAAU,WACX,wBAAIA,UAAU,kCAAd,WACA,yBAAKC,GAAG,UAAU4B,wBAAyB,CAACC,OAAOrB,EAAON,KAAKC,MAAME,gB,GAtB/DC,IAAMC,WCObuB,MARf,WACI,OACI,yBAAK/B,UAAU,wDACX,wBAAIA,UAAU,8BAAd,8BCgCGgC,E,2MA5BbC,MAAO,CACL3B,OAAQ,6qC,EAGVD,aAAc,SAAA6B,GACZ,IAAI5B,EAAS4B,EAAEC,OAAOd,MACtB,EAAKe,SAAS,CAAC9B,Y,wEAKf,OACE,oCACE,kBAAC,EAAD,MAEA,yBAAKN,UAAU,OACb,kBAAC,EAAD,CACEM,OAAQH,KAAK8B,MAAM3B,OACnBD,aAAcF,KAAKE,eAErB,kBAAC,EAAD,CAASC,OAAQH,KAAK8B,MAAM3B,e,GAtBpBC,IAAMC,WCKJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5a2c5332.chunk.js","sourcesContent":["import React from 'react'\n\nclass Editor extends React.Component{\n\n    render(){\n\n        return(\n            <div className=\"col m-2\">\n                <h2 className=\"h4 p-2 mb-2 bg-light text-dark\">Editor</h2>\n                <textarea id=\"editor\" className=\"textarea\" onChange={this.props.handleEditor}>\n                {this.props.editor}\n                </textarea>\n            </div>\n        )\n    }\n}\n\nexport default Editor","import React from 'react'\nconst marked = require('marked');\n\nclass Preview extends React.Component{\n\n    render(){\n        marked.setOptions({\n            renderer: new marked.Renderer(),\n            highlight: function(code, language) {\n              const hljs = require('highlight.js');\n              const validLanguage = hljs.getLanguage(language) ? language : 'plaintext';\n              return hljs.highlight(validLanguage, code).value;\n            },\n            pedantic: false,\n            gfm: true,\n            breaks: true,\n            sanitize: false,\n            smartLists: true,\n            smartypants: false,\n            xhtml: false\n          });\n\n        return(\n            <div className=\"col m-2\">\n                <h2 className=\"h4 p-2 mb-2 bg-light text-dark\">Preview</h2>\n                <div id=\"preview\" dangerouslySetInnerHTML={{__html:marked(this.props.editor)}}>                \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Preview","import React from 'react'\n\nfunction Header(){\n    return (      \n        <nav className=\"navbar navbar-dark bg-primary justify-content-center\">\n            <h1 className=\"navbar-text h3 text-center\">React Markdown Previewer</h1>\n        </nav>\n    )\n}\n\nexport default Header","import React from 'react';\nimport './App.css';\nimport Editor from './components/editor'\nimport Preview from './components/preview'\nimport Header from './components/header';\n\n\nclass App extends React.Component {\n  \n  state ={\n    editor: \"# Welcome to my React Markdown Previewer!\\n\\n## This is a sub-heading...\\n### And here's some other cool stuff:\\n  \\nHeres some code, `<div></div>`, between 2 backticks.\\n\\n```\\n// this is multi-line code:\\n\\nfunction anotherExample(firstLine, lastLine) {\\n  if (firstLine == '```' && lastLine == '```') {\\n    return multiLineCode;\\n  }\\n}\\n```\\n  \\nYou can also make text **bold**... whoa!\\nOr _italic_.\\nOr... wait for it... **_both!_**\\nAnd feel free to go crazy ~~crossing stuff out~~.\\n\\nThere's also [links](https://www.freecodecamp.com), and\\n> Block Quotes!\\n\\nAnd if you want to get really crazy, even tables:\\n\\nWild Header | Crazy Header | Another Header?\\n------------ | ------------- | ------------- \\nYour content can | be here, and it | can be here....\\nAnd here. | Okay. | I think we get it.\\n\\n- And of course there are lists.\\n  - Some are bulleted.\\n     - With different indentation levels.\\n        - That look like this.\\n\\n\\n1. And there are numbererd lists too.\\n1. Use just 1s if you want! \\n1. But the list goes on...\\n- Even if you use dashes or asterisks.\\n* And last but not least, let's not forget embedded images:\\n\\n![React Logo w/ Text](https://goo.gl/Umyytc)\"\n  }\n \n  handleEditor= e =>{\n    let editor = e.target.value\n    this.setState({editor})\n  }\n\n  render(){\n \n    return (\n      <>\n        <Header/>\n\n        <div className=\"row\">\n          <Editor\n            editor={this.state.editor} \n            handleEditor={this.handleEditor}\n          />\n          <Preview editor={this.state.editor}/>        \n        </div>\n      </>\n    );\n  }\n  \n}  \n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}